<?php
declare(strict_types=1);

namespace Figuren_Theater\PluginsRepo;


use Figuren_Theater\inc\EventManager;

use Figuren_Theater\Network\Admin_UI;
use Figuren_Theater\Network\Admin_UI\Interfaces as Admin_UI_Interfaces;
use Figuren_Theater\Network\Admin_UI\Traits as Admin_UI_Traits;
use Figuren_Theater\Options;
use Figuren_Theater\Network\Plugins;
use Figuren_Theater\Network\Post_Types;


use Figuren_Theater\Media\Image_Optimzation;
use Sharing_Image as Sharing_Image_Plugin;




/**
 * Plugins can be enabeled per site 
 * and 
 *
 */
class sharing_image extends Plugins\PluginSetup__Abstract implements EventManager\SubscriberInterface, Admin_UI_Interfaces\Has_Menu_Rule, Admin_UI_Interfaces\Has_Notice_Rule {

	use Admin_UI_Traits\Has_Rule;
	use Admin_UI_Traits\Has_Notice_Rule;

	/**
	 * We need for sure a basename
	 * because we are acting with real 
	 * existing files of 3rd party plugins
	 */
	const BASENAME = 'sharing-image/sharing-image.php';

	const POST_TYPE_SUPPORT = 'sharing-image';

	/**
	 * Full Options array, 
	 * enhancened by data from the current site or post
	 * 
	 * @var array
	 */
	protected $site_specific_options = [];
	

	protected $image_layers = [];

	protected $current_post = 0;

	function __construct()
	{

		$this->needed_cap  = 'manage_site_options';

		// $this->option_name = Sharing_Image_Plugin\Settings::OPTION_TEMPLATES;
		$this->option_name = 'sharing_image_templates';

		$this->options = [
			'sharing_image_license' => array (
				'premium' => true,
				'develop' => \WP_DEBUG,
			),
			'sharing_image_config' => array (
				'format' => 'jpg',
				'quality' => 95,
				'uploads' => 'default',
				'autogenerate' => 0, // not a true/false switch, but the index of the templates-array, with the template for autogeneration
			),
			"{$this->option_name}" => array (
				0 => array (
					'preview' => '',
					'title' => 'standard',
					'fill' => '#000000',
					'background' => 'dynamic',
					'width' => 1200,
					'height' => 630,
					'layers' => array (
						0 => array (
							'type' => 'text',
							'dynamic' => 'dynamic',
							'title' => 'Text',
							'content' => '',
							'sample' => 'Website mit ðŸ’• fÃ¼r figuren.theater',
							'preset' => 'title',
							'color' => '#ffffff',
							'horizontal' => 'left',
							'vertical' => 'center',
							'fontsize' => 50,
							'lineheight' => 1.5,
							'fontname' => 'open-sans',
							'x' => 100,
							'y' => 100,
							'width' => 1000,
							// 'height' => '',
						),
						1 => array (
							'type' => 'image',
							// 'attachment' => 45, // do not set this at all, to prevent fatal errors
							'x' => 25,
							'y' => 25,
							'width' => 50,
							'height' => 50,
						),
						2 => array (
							'type' => 'text',
							// 'dynamic' => 'dynamic',
							'dynamic' => 0,
							'title' => 'URL',
							'content' => 'figuren.theater',
							'sample' => 'figuren.theater/1234567',
							'preset' => 'ft_shortlink', // must be a custom name and not empty
							'color' => '#ffffff',
							'horizontal' => 'right',
							'vertical' => 'top',
							'fontsize' => 10,
							'lineheight' => 1.5,
							'fontname' => 'open-sans',
							'x' => 0,
							'y' => 595,
							'width' => 1175,
							// 'height' => '',
						),
						3 => array (
							'type' => 'rectangle',
							'color' => '#ff0000',
							'opacity' => 35,
							'thickness' => 0,
							'outline' => 0,
							'x' => 0,
							'y' => 0,
							'width' => 1200,
							'height' => 630,
						),
					),
				),
			)
		];

		$this->image_layers['title']   = 0;
		$this->image_layers['logo']    = 1;
		$this->image_layers['url']     = 2;
		$this->image_layers['overlay'] = 3;

		// screen_IDs
		$this->related_screen_ids = [
			'settings_page_sharing-image',
			'settings-network',
			'options',
		];

		$this->required_plugins = [];
	}


	/**
	 * Returns an array of hooks that this subscriber wants to register with
	 * the WordPress plugin API.
	 *
	 * @return array
	 */
	public static function get_subscribed_events() : array
	{
		return array(
	
			//////////////
			// FRONTEND //
			//////////////

			// remove <meta og:tags>, which are done by yoast
			'sharing_image_hide_meta' => 'sharing_image_hide_metatags',

			// Because 'wpseo_opengraph_image_size' FILTER IS BUGGY
			// 
			// we can not use the already working 'wpseo_opengraph_image' 
			// and 'wpseo_twitter_image' filters
			// 'wpseo_opengraph_image' => ['add_image_to_yoast_opengraph', 10, 2 ],
			// 'wpseo_twitter_image'   => ['add_image_to_yoast_opengraph', 10, 2 ],
			// // 'wpseo_opengraph_image_size' => 'add_image_size_to_yoast_opengraph', // this one is buggy
			// 
			// "Wrong image width and height when using "wpseo_opengraph_image" filter"
			// Issue #15052
			// https://github.com/Yoast/wordpress-seo/issues/15052
			// working solution from the coments
			// https://github.com/Yoast/wordpress-seo/issues/15052#issuecomment-695093003
			'wpseo_frontend_presentation' => [ 'add_image_to_yoast_opengraph', 30],


			/////////////
			// BACKEND //
			/////////////

			// TODO later
			// 
			// use the new webfont API
			// as soon as it supports
			// to get the path(es) of used fonts
			// AND their primary purpose (heading-fonts, body-text, etc.)
			// 
			// 'sharing_image_get_fontpath' => ['sharing_image_get_fontpath', 10, 2],

			// maybe TODO later
			// This is only relevant (and called), if the metabox is visible!
			// 
			// hand over the just yet selected 
			// and not yet saved fetaured-image to our autogeneration logic
			// 'sharing_image_update_post_meta' => ['mf_update_post_meta_sharing_image', 10, 2],

			// Disable any UI for the user
			// which is not that reliable
			// and not save to use.
			// 
			// Maybe this could be re-added in a future, 
			// advanced version of the 'schoener_teilen' feature
			'sharing_image_hide_metabox' => 'sharing_image_hide_metabox', // DISABLED 4 DEBUG

			// disable "Premium" tab on settings page
			'sharing_image_settings_tabs' => 'sharing_image_settings_tabs',


			////////////////////////////////////
			// BACKEND | Autogeneration logic //
			// triggered on 'wp_insert_post'  //
			////////////////////////////////////

				// helper (just) to get current post_id
				// used because it is (one of) the earliest point possible 
				// to hook into the autogeneration-process
				'sharing_image_disable_autogeneration' => ['persist_current_post', 10, 2],
				
				// update static, with more dynamic, site-specific options
				'pre_option_sharing_image_templates' => ['pre_option_sharing_image_templates', 20],

				// Re-Enables default func.
				// of using the featured-image as background-image
				// which is not happening reliable on autogeneration
				// 
				// BUGGY
				// 'sharing_image_prepare_template' => ['sharing_image_prepare_template', 10, 3],


				'sharing_image_autogenerated_poster' => ['delete_previous_image', 10, 2],


			////////////////////////////////////
			// BACKEND | Autogeneration logic //
			// triggered on 'updated_post_meta'  //
			////////////////////////////////////

			// Re-Enables default func.
			// of using the featured-image as background-image
			// which is not happening reliable on autogeneration
			// 
			'updated_post_meta' => ['trigger_autogeneration', 10, 4],


			//
			// 'delete_post' => ['delete_generated_image', 10, 2],
			// 'delete_post' is too late, because the relevant post_meta is already deleted
			/**
			 * Fires before a post is deleted, at the start of wp_delete_post().
			 *
			 * @since 3.2.0
			 * @since 5.5.0 Added the `$post` parameter.
			 *
			 * @see wp_delete_post()
			 *
			 * @param int     $postid Post ID.
			 * @param WP_Post $post   Post object.
			 */
			'before_delete_post' => ['delete_generated_image', 10, 2],
		);
	}

	public function enable() : void
	{
		// gets added to the 'OptionsCollection' 
		// from within itself on creation
		new Options\Factory( 
			$this->options, 
			'Figuren_Theater\Options\Option', 
			$this::BASENAME
		);

		\add_post_type_support( 'post', self::POST_TYPE_SUPPORT );
		\add_post_type_support( 'page', self::POST_TYPE_SUPPORT );
	}


	/**
	 * The only way to get into that process 
	 * and get the ID of the current edited post
	 *
	 * @package project_name
	 * @version version
	 * @author  Carsten Bach
	 *
	 * @param   bool         $disable_autogeneration [description]
	 * @param   [type]       $post_id                [description]
	 * @return  [type]                               [description]
	 */
	public function persist_current_post( bool $disable_autogeneration, $post_id) : bool
	{
		if ( \wp_installing() )
			return true;

		// persist post_id
		$this->current_post = $post_id;

		//
		if ( \wp_is_post_revision( $post_id ) )
			$this->current_post = \get_post_parent( $post_id );

		//
		if ( !\post_type_supports( \get_post_type( $this->current_post ), self::POST_TYPE_SUPPORT ))
			return true;

		// and go on
		// nothing to see here
		return $disable_autogeneration;
	}

	public function pre_option_sharing_image_templates( $option ) : array|bool
	{
		// when this original option is set 
		// during SiteSetup or within our weekly cron job
		// this filter should return false
		if (!is_array($option))
			return $option;


		// $template = $this->options[ $this->option_name ][0];
		$template = $option[0];

	    // 
	    $template = $this->get_site_logo($template);
	    
	    // 
	    $template = $this->get_theme_color($template);
	 	// $template['fill']               = '#0000ff'; // Testing this filter
	 	// $template['layers'][3]['color'] = '#0000ff'; // Testing this filter // ['layers'][3] == rectangle
	  
	    // 
	    $template = $this->get_featured_image($template);
	    
	    // 
	    $template = $this->get_shortlink($template);

	    // BEWARE
	    // do this last
	    // because the order of the layers gets modified
	    // and so $this->image_layers might break
	    // 
if ('will-trigger-never' === \get_post_type( $this->current_post )) {
	    // if ( Post_Types\Post_Type__ft_production::NAME === \get_post_type( $this->current_post )) {

	    	$_new_text_layer = array (
				'type' => 'text',
				'dynamic' => 0,
				'title' => 'Dauer',
				'content' => 'Dauer: 75 Minuten', // @TODO
				'sample' => 'Dauer: 75 Minuten', // @TODO
				'preset' => 'title',
				'color' => '#ffffff', // @TODO
				'horizontal' => 'left',
				'vertical' => 'top',
				'fontsize' => 10,
				'lineheight' => 1.5,
				'fontname' => 'open-sans',
				'x' => 100,
				'y' => 595,
				'width' => 1000,
				// 'height' => '',
			);
			// v1
			// $template['layers'][4] = $_new_text_layer;
			// v2
			array_unshift($template['layers'], $_new_text_layer);


	    	$_new_text_layer = array (
				'type' => 'text',
				'dynamic' => 0,
				'title' => 'Zielgruppe',
				'content' => 'fÃ¼r alle ab 5 Jahren', // @TODO
				'sample' => 'fÃ¼r alle ab 5 Jahren', // @TODO
				'preset' => 'title',
				'color' => '#ffffff', // @TODO
				'horizontal' => 'left',
				'vertical' => 'top',
				'fontsize' => 10,
				'lineheight' => 1.5,
				'fontname' => 'open-sans',
				'x' => 300,
				'y' => 595,
				'width' => 800,
				// 'height' => '',
			);
			// v1
			// $template['layers'][4] = $_new_text_layer;
			// v2
			array_unshift($template['layers'], $_new_text_layer);
	    }

	    //
		$option[0] = $template;
		

		return $option;
	}

	/*public function sharing_image_prepare_template($template, $fieldset, $index)
	{
		// $thumbnail_id = \get_post_thumbnail_id( $this->current_post );
		// error_log( var_export([
		// 	 'Sharing_Image::  sharing_image_prepare_template  ::::::::::::::::::::::::::::', 
		// 	 $template, $fieldset, $index, $this->current_post, $thumbnail_id
		// ],true) );		

		// 0.
		if ( isset($template['image']) && \esc_url( $template['image'] ))
			return $template;

		// 1.'generate_template()' @ plugins\sharing-image\classes\class-generator.php
		$thumbnail_id = \get_post_thumbnail_id( $this->current_post );
		if ( ! empty( $thumbnail_id ) ) {
			$fieldset['attachment'] = $thumbnail_id;
		}

		// 2.'prepare_template()' @ plugins\sharing-image\classes\class-generator.php
		if ( ! empty( $fieldset['attachment'] ) ) {
			$template['image'] = \get_attached_file( $fieldset['attachment'] );
		}

		return $template;
	}*/


	/**
	 * Delete previous, old autogenerated-image
	 * to save disk-space
	 * 
	 * The 'sharing_image_autogenerated_poster' filter normally 
	 * "Filters autogenerated poster data."
	 *
	 * but we can use it to check, 
	 * if we have a new image 
	 * and if so, delete the old one.
	 *
	 * @since Sharing_Image 2.0.11
	 *
	 * @param array|false $poster  Poster image, width and height data or false if undefined.
	 * @param integer     $post_id Post ID.
	 */
	public function delete_previous_image( $poster, $post_id ) : array|false
	{
		// return early
		// if we have no new image
		if (false === $poster)
			return $poster;

		// compress image
		// this makes 25kb > 15kb and 93kb > 49kb
		$_path = $this->__get_path_from_url( $poster['poster'] );
		// $file_put_contents = ft_proto__image_replace( $_path );
		$file_put_contents = Image_Optimzation\replace( $_path );

		// return early
		// if it is a revision
		// 
		// !! not needed, because 'update_post_meta()'
		// !! does correct the post_id to point to the post_parent
		// 
		// if ( \wp_is_post_revision( $post_id ) )
		// 	return false;

		// grab the last image from post_meta,
		// before it gets updated
		// which happens directly after this filter
		// @plugins\sharing-image\classes\class-widget.php

		// CLONED FROM: // 'update_post_meta()'
		// Make sure meta is got for the post, not for a revision.
		$the_post = \wp_is_post_revision( $post_id );
		if ( $the_post ) {
			$post_id = $the_post;
		}
		// CLONED FROM: // 'update_post_meta()'

		// get old image data, if any
		$old_poster = \get_post_meta( $post_id, Sharing_Image_Plugin\Widget::WIDGET_META, true );
		// could be replaced with 
		// $old_poster = \sharing_image_poster( $post_id );

		// return
		// if there was no image, yet
		if ( ! isset( $old_poster['poster'] ) || !\esc_url( $old_poster['poster'] ) )
			return $poster;

		// here, we know
		// we already had one image,
		// so we have a valid url
		// so find its path
		// and delete it
		$old_poster_path = $this->__get_path_from_url( $old_poster['poster'] );
		if (file_exists($old_poster_path))
			unlink($old_poster_path);

		// bye bye
		// and return the un-modified, new image (data)
		return $poster;
	}


	/**
	 * By default the autogenartion is not done, when just swapping featured-images,
	 * because it is not the whole $post that is changed, but only some metadata.
	 *
	 * So we have another action hooked onto the change of the featured-image meta,
	 * which triggers the autogenartion.
	 *
	 * ---
	 * 
	 * Fires immediately after updating metadata of a specific type.
	 *
	 * The dynamic portion of the hook name, `$meta_type`, refers to the meta object type
	 * (post, comment, term, user, or any other type with an associated meta table).
	 *
	 * Possible hook names include:
	 *
	 *  - `updated_post_meta`
	 *  - `updated_comment_meta`
	 *  - `updated_term_meta`
	 *  - `updated_user_meta`
	 *
	 * @since 2.9.0
	 *
	 * @param int    $meta_id     ID of updated metadata entry.
	 * @param int    $object_id   ID of the object metadata is for.
	 * @param string $meta_key    Metadata key.
	 * @param mixed  $_meta_value Metadata value.
	 */
	public function trigger_autogeneration( $meta_id, $object_id, $meta_key, $_meta_value ) : void
	{
		if ('_thumbnail_id' !== $meta_key)
			return;

		// autogenerate_poster() does nothing because
		// a meta['poster'] is not empty
		// 
		// so we have to delete this at first
		// to make sure this runs properly
		\delete_post_meta( $object_id, Sharing_Image_Plugin\Widget::WIDGET_META );

		// make sure this is set
		$this->current_post = $object_id;

		// Generate new poster data using post data.
		// ( new Sharing_Image\Meta() )->get_poster( $object_id );
		$SIW = new Sharing_Image_Plugin\Widget();
		$source = ( $SIW )->autogenerate_poster( $object_id );
	}


	/**
	 * [prepare_text_layer description]
	 *
	 * @subpackage [subpackage]
	 * @version    2022-10-05
	 * @author     Carsten Bach
	 *
	 * @param      string       $layer_name [description]
	 * @param      string       $new_text   [description]
	 * @return     [type]                   [description]
	 */
	protected function prepare_text_layer( $layer_name = 'title', $new_text = '' )
	{
		// which index has this layer
		// in the array of saved layers for this template
		$layer_index = $this->image_layers[ $layer_name ];
		
		// update data
		$this->site_specific_options[0]['layers'][$layer_index]['sample']  = $new_text;
		$this->site_specific_options[0]['layers'][$layer_index]['content'] = $new_text;
		
		return $this->site_specific_options;
	}

	protected function get_site_logo( array $template ) : array
	{
		// which index has this layer
		// in the array of saved layers for this template
		$layer_index = $this->image_layers[ 'logo' ];

		// get site-logo ID
		$logo     = \get_option( 'site_icon' );

		if (empty($logo)) {
			// the plugin itself checks if 'attachment' isset()
			unset( $template['layers'][$layer_index]['attachment'] );
		} else {
			$template['layers'][$layer_index]['attachment'] = $logo;
		}
					
		return $template;
	}

	protected function get_theme_color( array $template ) : array
	{
		// get colors from gutenberg
		// from mu-plugins\ft_FEATURES__customizer-powered-login.php
		// 
		// >>> array ( 'ft_background' => '#0f0b0e', 'ft_accent' => '#d20394', 'ft_text' => '#fbf9fa', )
		extract( \ft_get_relevant_colors() );
		
		// prepare color options with site-specific stuff
		$template['fill']                                              = $ft_background;
		$template['layers'][ $this->image_layers['title']   ]['color'] = $ft_text;   // ['layers'][0] == text
		$template['layers'][ $this->image_layers['url']     ]['color'] = $ft_text;   // ['layers'][2] == text
		$template['layers'][ $this->image_layers['overlay'] ]['color'] = $ft_accent; // ['layers'][3] == rectangle

		return $template;
	}

	protected function get_featured_image( array $template ) : array
	{
		// 0.
		if ( isset($template['image']) && \esc_url( $template['image'] ))
			return $template;

		// 1.'generate_template()' @ plugins\sharing-image\classes\class-generator.php
		$thumbnail_id = \get_post_thumbnail_id( $this->current_post );
		if ( ! empty( $thumbnail_id ) ) {
			$template['image'] = \get_attached_file( $thumbnail_id );
		}
	
		return $template;
	}

	protected function get_shortlink( array $template ) : array
	{
		// prepare url
		$url = null;	

		// get url of current post or site
		if ( empty( $url ) )
			$url = \wp_get_shortlink($this->current_post);

		// fallback
		if ( empty( $url ) )
			$url = \wp_get_shortlink();

		// still empty ?
		if ( empty( $url ) )
			$url = \site_url();

		if (\esc_url( $url )) {
			
			// remove protocoll
			$url = str_replace('https://', '', $url);

			// set data
			$template['layers'][ $this->image_layers['url'] ]['sample']  = $url;
			$template['layers'][ $this->image_layers['url'] ]['content'] = $url;
			// $this->prepare_text_layer( 'url', $url ); // this safes into prop
		}			

		return $template;
	}






	/**
	 * [add_image_to_yoast_opengraph description]
	 * 
	 * uses Filter: 'wpseo_opengraph_image' - Allow changing the Open Graph image.
	 *
	 * @param   string - The URL of the Open Graph image.
	 * @param   Indexable_Presentation $presentation The presentation of an indexable.
	 *
	 * 
	 * @return  string - The URL of the Open Graph image.
	 *
	 * @see     https://developer.yoast.com/customization/apis/metadata-api/#opengraph-presenters
	 *
	 * @package project_name
	 * @version version
	 * @author  Carsten Bach
	 *
	 */
	public function add_image_to_yoast_opengraph( $presentation )
	{
		$generated_image_url = \sharing_image_poster();
		if( \esc_url( $generated_image_url ) )
		{
			$presentation->open_graph_images = [
				[
					'url' => \esc_url( $generated_image_url ),
					'width' => $this->options[ $this->option_name ][0]['width'],
					'height' => $this->options[ $this->option_name ][0]['height'],
					'type' => 'image/'. $this->options[ 'sharing_image_config' ]['format']
				]
			];
		}

		return $presentation;
	}


	/**
	 * [sharing_image_hide_metatags description]
	 * @param bool $hide_header Set true to hide poster meta.
	 *
	 * @see     https://wpset.org/sharing-image/hooks/#sharing_image_hide_meta
	 *
	 * @package project_name
	 * @version version
	 * @author  Carsten Bach
	 *
	 * @param   bool         $hide_meta [description]
	 * @return  [type]                  [description]
	 */
	public static function sharing_image_hide_metatags( bool $hide_meta ) : bool
	{
	
	    return true;
	}





	public function enable__on_admin() : void {


		$Admin_UICollection = \Figuren_Theater\API::get('Admin_UI');

		// prepare options to be highlkighted on the settings page

		$_reduced_editor_options = $this->options[ $this->option_name ][0];
		$_options_per_layer = [];
		foreach (array_reverse( $_reduced_editor_options['layers'] ) as $layer => $template) {
			// $_options_per_layer[ 'sharing_image_editor[layers]['.$layer.']' ];
			$_options_per_layer = array_merge( $_options_per_layer, array_map(function($opt) use ($layer) { return 'sharing_image_editor[layers]['.$layer.']'.'['.$opt.']';} , array_keys( $template ) )
			);
		}
		// \wp_die(var_export($_options_per_layer,true));
		// remove some not needed CSS putput
		unset($_reduced_editor_options['layers']);

		// collect all settings as CSS readable strings
		$settings_to_highlight = array_merge(
			
			// $this->settings_to_highlight(  $this->options[ $this->option_name ], $this->option_name ),
			// array_map(function($opt) { return $this->option_name.'['.$opt.']';} , array_keys( $this->options[ $this->option_name ] ) ),
			array_map(function($opt) { return 'sharing_image_editor'.'['.$opt.']';} , array_keys( $_reduced_editor_options ) ),
			
			//
			$_options_per_layer,
			
			// $this->settings_to_highlight(  $this->options[ 'sharing_image_config' ], 'sharing_image_config' ),
			array_map(function($opt) { return 'sharing_image_config'.'['.$opt.']';} , array_keys( $this->options[ 'sharing_image_config' ] ) )
			
		);

		$settings_highlight = new Admin_UI\Rule__will_highlight_settings(
			$this->needed_cap, // user_capability
			$this->related_screen_ids, // screen_ID
			// 1. array_keys( $this->options )
			// 2. array_map(function($opt) { return $this->option_name.'['.$opt.']';} , array_keys( $this->options ) )
			// 3.
			$settings_to_highlight
		);
		$Admin_UICollection->add( $this::BASENAME.'__highlight_settings', $settings_highlight );
	}


	/**
	 * [sharing_image_settings_tabs description]
	 * @param array $tabs List of settings tabs.
	 *
	 * @see     https://wpset.org/sharing-image/hooks/#sharing_image_settings_tabs
	 *
	 * @package project_name
	 * @version version
	 * @author  Carsten Bach
	 *
	 * @param   array        $tabs [description]
	 * @return  [type]             [description]
	 */
	public static function sharing_image_settings_tabs( array $tabs ) : array
	{
	    unset( $tabs['premium'] );
	    return $tabs;
	}



	/**
	 * @param bool $hide_metabox Set true to hide metabox.
	 * @see   https://wpset.org/sharing-image/hooks/#sharing_image_hide_metabox
	 */
	public function sharing_image_hide_metabox( bool $hide_metabox ) : bool
	{
	
	    return \current_user_can( $this->get_needed_cap() );
	}



	/**
	 * This is only relevant, if the metabox is visible!
	 * 
	 * @param string $meta    Updated post meta.
	 * @param string $post_id Post ID.
	public function mf_update_post_meta_sharing_image( $meta, $post_id ) {
		// get featured image
		$featured_image = \get_post_thumbnail_id($post_id);

		# error_log(var_export([
		# 		\current_filter(),
		# 		'mf_update_post_meta_sharing_image()',
		# 		 $meta, $post_id 
		# 	],true));


		if($featured_image) {
			if(isset($meta) && isset($meta['fieldset'])){
					// loop all templates
					foreach ($meta['fieldset'] as $index => $template) {
						// assign featured image as attachment if no attachment defined
						if(!isset($template['attachment']) || !$template['attachment']){
							$meta['fieldset'][$index]['attachment'] = $featured_image;
						}
					}
			}
		}

		return $meta;
	}
	 */



	/**
	 * UNUSED right now
	 * 
	 * @param string $path  Font file path.
	 * @param array  $layer Layer data.
	 *
	 * @see   https://wpset.org/sharing-image/hooks/#sharing_image_get_fontpath
	public static function sharing_image_get_fontpath( $path, $layer ) {

		global $wp_styles, $wp_scripts;
		wp_die(var_export([
			$wp_styles,
			$wp_scripts
		],true));

		return $path;
	    // return WP_PLUGIN_DIR . '/my-plugin/font.ttf';
	}
	 */


	public function delete_generated_image( int $post_id, \WP_Post $post )
	{
		if ( ! \post_type_supports( $post->post_type, self::POST_TYPE_SUPPORT ))
			return;

		// 
		$_sharing_image = \get_post_meta( $post_id, Sharing_Image_Plugin\Widget::WIDGET_META, true );
		// could be replaced with 
		// $_sharing_image = \sharing_image_poster( $post_id );

		//
		if ( ! isset( $_sharing_image['poster'] ) || ! \esc_url( $_sharing_image['poster'] ) )
		// if ( ! \esc_url( $_sharing_image ) )
			return;


		$_sharing_image_path = $this->__get_path_from_url($_sharing_image['poster']);
		// $_sharing_image_path = $this->__get_path_from_url($_sharing_image);
		if (empty($_sharing_image_path))
			return;

		unlink($_sharing_image_path);
	}


	private static function __get_path_from_url( string $url='' ) : string
	{
		//
		$wp_upload_dir = \wp_get_upload_dir();

		$path = str_replace(
			$wp_upload_dir['baseurl'],
			$wp_upload_dir['basedir'],
			$url
		);

		if (!file_exists($path))
			return '';

		return $path;
	}




	/**
	 * Implements the basics for removing Menus
	 * from the Admin-UI
	 *
	 * required by Admin_UI_Interfaces\Has_Menu_Rule
	 *
	 * @package Admin_UI
	 * @version 2022.05.31
	 * @author  Carsten Bach
	 *
	 * @return  Array       list of menu slugs
	 */
	public function get_menus_to_remove() : array
	{

		return [ 'options-general.php'=>'sharing-image' ];
	}


	/**
	 * Implements the capabilities needed
	 * for removing Menus from the Admin-UI
	 *
	 * required by Admin_UI_Interfaces\Has_Menu_Rule
	 *
	 * @package Admin_UI
	 * @version 2022.05.31
	 * @author  Carsten Bach
	 *
	 * @return  String       WordPress capability
	 */
	public function get_menus_to_remove_cap() : string
	{

		return 'manage_site_options';
	}

}
